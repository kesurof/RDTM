# Multi-stage build pour réduire la surface d'attaque
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production && npm cache clean --force
COPY frontend/ ./
RUN npm run build

FROM python:3.11-slim AS backend-builder

# Créer un utilisateur non-root
RUN groupadd -r rdtm && useradd -r -g rdtm rdtm

WORKDIR /app

# Installer les dépendances système nécessaires
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Installer les dépendances Python
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim AS production

# Créer un utilisateur non-root
RUN groupadd -r rdtm && useradd -r -g rdtm rdtm

# Installer uniquement les dépendances runtime nécessaires
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Copier les dépendances Python depuis le builder
COPY --from=backend-builder /root/.local /home/rdtm/.local
ENV PATH=/home/rdtm/.local/bin:$PATH

# Copier le frontend buildé
COPY --from=frontend-builder /app/frontend/dist ./static/

# Copier le code de l'application
COPY --chown=rdtm:rdtm . .

# Configurer les permissions
RUN chown -R rdtm:rdtm /app && \
    chmod -R 755 /app

# Utiliser l'utilisateur non-root
USER rdtm

# Exposer le port (non-privilégié)
EXPOSE 8000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Commande de démarrage
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "app.wsgi:application"]
